Test_Call:
  <CallExpr a.adb:18:12-18:42> = F1 (1, 2, 3)
  <CallExpr a.adb:19:12-19:24> = F1 (1, 2, 3)
  <CallExpr a.adb:20:12-20:36> = F1 (1, 2, 3)
  <Id "F1" a.adb:21:12-21:14> = F1 (1, 1, 3)
  <CallExpr a.adb:22:12-22:30> = F1 (1, 2, 3)
  <CallExpr a.adb:23:12-23:18> = F1 (1, 1, 3)
  <CallExpr a.adb:24:12-24:24> = F1 (1, 2, 3)
  <CallExpr a.adb:26:12-26:24> = F2 (1, 2, 3, 4)
  <Id "F2" a.adb:27:12-27:14> = F2 (1, 2, 4, 4)
  <CallExpr a.adb:29:12-29:33> = P1.all (1, 2, 3)
  <CallExpr a.adb:31:12-31:42> = P2.all (1, 2, 3, 4)
Test_Deref:
  <ExplicitDeref a.adb:40:12-40:21> = X_Ptr.all
Test_Field:
  <DottedName a.adb:61:12-61:16> = R1.X
  <DottedName a.adb:62:12-62:16> = R1.Y
  <DottedName a.adb:63:12-63:18> = R2.R.X
  <DottedName a.adb:64:12-64:18> = R2.R.Y
  <DottedName a.adb:65:12-65:16> = R2.Z
  <DottedName a.adb:66:12-66:15> = F ().X
  <DottedName a.adb:67:12-67:15> = F ().Y
  <DottedName a.adb:68:12-68:24> = F (1, 2).R.X
  <DottedName a.adb:69:12-69:24> = F (1, 2).R.Y
  <DottedName a.adb:70:12-70:22> = F (1, 2).Z
Test_Implicit_Deref_Field:
  <DottedName a.adb:87:12-87:43> = R.Next.all.Prev.all.Next.all.Next.all.Value
Test_Array_Index:
  <CallExpr a.adb:124:12-124:24> = Integer (42)
  <CallExpr a.adb:126:12-126:20> = Arr1 [8]
  <CallExpr a.adb:127:12-127:23> = Arr2 [8, 9]
  <DottedName a.adb:128:12-128:22> = Arr4.all [7].X
  <CallExpr a.adb:129:12-129:25> = Arr5.all.FArr [8]
  <CallExpr a.adb:131:15-131:28> = Arr1 [1 .. 5]
  <CallExpr a.adb:132:15-132:30> = Arr1 [signed (-2147483648, 2147483647)
                                           range 1 .. 5]
  <CallExpr a.adb:133:15-133:42> = Arr1 [signed (-2147483648, 2147483647)
                                           range 1 .. 5]
  <CallExpr a.adb:134:15-134:36> = Arr1 [Type(SmallInt)'Range]
  <CallExpr a.adb:135:15-135:32> = Arr1 [Arr6'Range]
  <CallExpr a.adb:136:15-136:35> = Arr1 [Arr2'Range(1)]
  <CallExpr a.adb:138:12-138:27> = Arr6 [3 .. 5] [3]
  <CallExpr a.adb:140:12-140:32> = Arr7 [2 .. 4] [3].all [10]
Test_Membership_Expr:
  <MembershipExpr a.adb:152:12-152:22> = X in Expr(Y) | Expr(Z)
  <MembershipExpr a.adb:153:12-153:29> = X not in Type(SmallInt)
  <MembershipExpr a.adb:154:12-154:31> = X in Range(Type(SmallInt)'Range)
Test_Qualified_Expr:
  <QualExpr a.adb:162:12-162:24> = SmallInt'(1)
"&":
  
Test_Operator_Symbol:
  <CallExpr a.adb:175:12-175:22> = "&" (X, Y)
Test_Raise_Expression:
  <RaiseExpr a.adb:183:12-183:31> = raise Program_Error
  <RaiseExpr a.adb:184:12-184:19> = raise A
Test_Op:
  <BinOp a.adb:191:12-191:17> = "&" (X, Y)
  <BinOp a.adb:192:12-192:17> = X + Y
  <UnOp a.adb:193:12-193:14> = -X
  <UnOp a.adb:194:12-194:14> = +X
  <UnOp a.adb:195:12-195:17> = abs X
  <BinOp a.adb:197:12-197:34> = X = 10 and then Y > 10
Test_Record_Aggregate:
  <Aggregate a.adb:208:12-208:36> = (X => 42, Y => 42, B => True)
  <Aggregate a.adb:209:12-209:34> = (X => 42, Y => 42, B => <>)
Test_Array_Aggregate:
  <Aggregate a.adb:218:12-218:44> = (1 .. 5 | 6 => 42, others => 13)
  <Aggregate a.adb:219:12-219:38> = (1, 2, 3, 4, others => 13)
  <Aggregate a.adb:220:12-220:69> = (signed (-2147483648, 2147483647)
                                       range 1 .. 2 => 12,
                                     signed (-2147483648, 2147483647)
                                       range 3 .. 5 => 21,
                                     others => 212)
Test_Allocator:
  <Allocator a.adb:235:12-235:19> = Rec
  <Allocator a.adb:236:12-236:19> = Arr
  <Allocator a.adb:237:12-237:48> = Rec'((X => 1, Y => 2, B => False))
  <Allocator a.adb:238:12-238:34> = Arr'((, others => 42))
Test_Case_Expression:
  <ParenExpr a.adb:246:12-249:33> = case 5 is
                                      when signed (-2147483648, 2147483647)
                                             range 1 .. 5 => 42,
                                      when 12 | 21 => 35,
                                      when others => 31
Test_Quantified:
  <ParenExpr a.adb:259:12-259:49> = (for some I in A'Range => A [I] = 42)
  <ParenExpr a.adb:260:12-260:48> = (for all I in A'Range => A [I] = 42)
  <ParenExpr a.adb:261:12-261:49> = (for some I in 1 .. 10 => A [I] = 42)
  <ParenExpr a.adb:262:12-262:48> = (for all I in signed (-2147483648, 2147483647) =>
                                       A [I] = 42)
  <ParenExpr a.adb:263:12-263:43> = (for some I of A => A [I] = 42)
  <ParenExpr a.adb:264:12-264:38> = (for all E of A => E = 42)
Test_Attribute:
  <BinOp a.adb:275:12-275:39> = A'First + A'Last + A'Length
  <BinOp a.adb:277:12-277:55> = Type(Arr)'First + Integer (Type(MyInt)'Last) + 
                                A'Length
